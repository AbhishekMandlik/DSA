class Solution {
public:
    vector<vector<string>> findSequences(string beginWord, string endWord, vector<string>& wordList) {
        // code here
        unordered_set<string>st(wordList.begin(), wordList.end());
        vector<vector<string>>ans;
        queue<vector<string>>q;
        vector<string>used;
        used.push_back(beginWord);
        q.push({beginWord});
        int level=0;
        while(!q.empty())
        {
            vector<string>vec=q.front();
            q.pop();
            if(vec.size()>level)
            {
                level++;
                for(auto it:used)
                {
                   st.erase(it); 
                }
                used.clear();
            }
            
            string word=vec.back();
            if(word==endWord)
            {
                if(ans.size()==0)ans.push_back(vec);
                else if(vec.size()==ans[0].size())ans.push_back(vec);
            }
            
            
            
            for(int i=0; i<word.size(); i++)
            {
                char original=word[i];
                for(char c='a'; c<='z';c++)
                {
                    word[i]=c;
                    if(st.find(word)!=st.end())
                    {vec.push_back(word);
                    q.push({vec});
                    used.push_back(word);
                    vec.pop_back();}
                }
                word[i]=original;
            }
        }
        return ans;
        
    }
};
